package partita;

import interfacceComunicazione.Client;

import java.awt.Color;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.Socket;
import java.rmi.RemoteException;
import java.util.ArrayList;
import java.util.Iterator;

import prepartita.Prepartita;

public class Giocatore {

	private String username = null;
	private Socket client = null;
	private Client clientInt = null;
	private String colore = null;
	private String azionePartita = null;
	private ArrayList<Territorio> territori = null;
	private Integer numeroArmate = 0;
	
	PrintWriter writer = null;
	BufferedReader reader = null;
	
	//Se sto comunicando con socket
	public Giocatore(String username, Socket client){
		this.username = username;
		this.client = client;
		this.territori = new ArrayList<Territorio>();
		
		//non lo vorrei qua
		try {
			writer = new PrintWriter(client.getOutputStream(),true);
			reader = new BufferedReader(new InputStreamReader(client.getInputStream()));
		} catch (IOException e) {
			writer = null;
			reader = null;
		}
	}
	
	//Se sto comunicando con RMI --> dovrò poter fare una callback();
	public Giocatore(String username, Client clientInt) {
		this.username = username;
		this.clientInt = clientInt;
		this.territori = new ArrayList<Territorio>();
		System.out.println("Giocatore: create RMI: "+clientInt);
	}

	public Giocatore(String username) {
		// TODO Auto-generated constructor stub
		this.username = username;
	}

	public String inviaTerritori() {
		
		String esitoOperazione = null;
		
		System.out.println("Mi trovo nel metodo inviaTerritori");
		String territorio = "territorio@";
		Iterator<Territorio> it = territori.iterator();
		
		System.out.println("Valore territorio in inviaTerritori da "+username);
		while(it.hasNext()){
			//System.out.println(it.next().toString());
			//territorio.concat(it.next().toString());
			territorio = territorio + it.next().getCodice() + ";";
		}
		
		System.out.print("Territorio da inviare: ");
		System.out.println(territorio);	
		
		//SOCKET
		if (client != null) {
			PrintWriter writer = null;		
			
			try {
				writer = new PrintWriter(client.getOutputStream(),true);
				writer.println(territorio);
				writer.flush();
				
				esitoOperazione = reader.readLine();
				
				if (esitoOperazione.endsWith("true")) {
					esitoOperazione = "true";
				}
				else {
					esitoOperazione = "false";
				}
				System.out.println("-->ESITO TERRITORI: "+esitoOperazione);
				//writer.close();
			} catch (IOException e) {
				System.out.println("Problema writer inviaTerritori: "+e.getMessage());
			}		
		}
		//RMI
		else if (clientInt != null) {
			try {
				System.out.println("SONO IN GIOCATORE PER INVIO TERRITORIO CON RMI");
				esitoOperazione = clientInt.comandoDaEseguire(territorio);
				//dovrò leggere lo stato di questa variabile
			} catch (RemoteException e) {
				System.out.println("Giocatore problema territori: "+e.getMessage());
			}
		}
		
		return esitoOperazione;
	}
	
	public void visualizzaterritori(){
		System.out.println("Utente: "+username);
		Iterator<Territorio> it = territori.iterator();
		while(it.hasNext()){
			System.out.println(it.next());
		}
		
	}
	
	public void setTerritori(Territorio territorio){
		this.territori.add(territorio);
	}
	
	public String getUser(){
		return this.username;
	}
	
	public Socket getSocket(){
		return this.client;
	}
	
	public Client getClientInt() {
		return this.clientInt;
	}
	
	//Setto il comando che dovrò inviare al Client. Richiamato in Partita#
	public void setAzioneComando(String comando){
		this.azionePartita = comando;
	}
	/*
	private void azioneColore(String[] colori) {
		writer.println(azionePartita+"@"+colori[0]+colori[1]+colori[2]+colori[3]+colori[4]+colori[5]);
		writer.flush();
		//writer.close();
		System.out.println("Aspetta la risposta dal client.");
		try {
			colore = reader.readLine();
			System.out.println("Il client mi ha risposto");
			for(int i = 0; i < colori.length; i++){
				if(colore.equals(colori[i])){
					colori[i] = "";
				}
			}
		} catch (IOException e) {
			System.out.println("Problema lettura colore: "+e.getMessage());
		}
		//reader.close();
		System.out.println("Colore scelto da "+username+" e' : "+colore);		
	}*/
	
	//Eseguo il comando settato da Partita#
	public void eseguiComandi(String[] colori) throws IOException {
		
//		System.out.println("SOCKET: "+client);
//		System.out.println("RMI: "+clientInt);
		
		//se vero facciamo il socket
//		if(client != null) {
			
//			System.out.println("eseguiComandi: "+client.toString());
//			System.out.println(azionePartita);
			
			switch(azionePartita) {
				case "colore":{	
					if (client != null) {
						
						System.out.println(azionePartita+"@"+colori[0]+colori[1]+colori[2]+colori[3]+colori[4]+colori[5]);
						writer.println(azionePartita+"@"+colori[0]+colori[1]+colori[2]+colori[3]+colori[4]+colori[5]);
						writer.flush();
						//writer.close();
						System.out.println("Aspetta la risposta dal client.");
						setColore(reader.readLine());
						System.out.println("Il client mi ha risposto");
					
					}
					else if (clientInt != null) {
						System.out.println("Invio colore RMI");
						//Mando i colori possibili
						setColore(clientInt.comandoDaEseguire(azionePartita+"@"+colori[0]+colori[1]+colori[2]+colori[3]+colori[4]+colori[5]));
						System.out.println("Colore scelto da "+username+" e' : "+colore);
						//Dovrò attendendere una sua risposta e la salverò in colore...
						//è il modo giusto per fare ciò? Parlane con Antonio
						
					}
					
					for(int i = 0; i < colori.length; i++){
						if(colore.equals(colori[i])){
							this.colore = colore;
							colori[i] = "";
						}
					}
					System.out.println("Colore scelto da "+username+" e' : "+colore);
					
					break;
				}
			}
	}
	
	public ArrayList<Territorio> getLista(){
		return this.territori;
	}

	public void setArmate(int numeroArmate) {
		this.numeroArmate = numeroArmate;		
	}
	
	public Integer getArmate(){
		return this.numeroArmate;
	}
	
	public void posiziona(){
		//gestione del socket per il posizionamento... MANCA LA PARTE RMI
		if(client != null){
			
		}
		
	}


	public String getColore() {
		return colore;
	}

	public void setColore(String colore) {
		this.colore = colore;
	}

}
