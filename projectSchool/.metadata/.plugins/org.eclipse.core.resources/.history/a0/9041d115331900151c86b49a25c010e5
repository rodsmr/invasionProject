package login;

import interfacceComunicazione.ServerAccept;
import interfacceComunicazione.Server;
import analisiComandi.AnalisiLogin;
import java.awt.event.*;
import javax.swing.*;
import java.net.*;
import java.rmi.RemoteException;
import java.io.*;

public class FinestraLogin {
	
	private static final int PORT = 4500;
	private static final String HOST = "127.0.0.1";
	
	private AnalisiLogin analisiLogin = null;
	
	private JFrame finestraLogin = null;
	
	private JLabel username = null;
	private JLabel pw = null;

	protected JTextField visualizzaTipoComunicazione = null;
	private JTextField inserisciUser = null;
	private JPasswordField inserisciPW = null;
	
	private JButton login = null;
	private JButton registrati = null;	

	private GestioneFinestre gestioneFinestre = null;
	
	private ClientImpl client = null;
	private Server server = null;

	private Socket clientSocket = null;
	
	public FinestraLogin() {
		
		try{
			this.client = new ClientImpl();
			this.client.start();
		}
		catch(RemoteException e){
			System.out.println("Errore creazione fallita client login");
			//bisogna decidere cosa fargli fare
		}
		
		this.gestioneFinestre  = new GestioneFinestre();
		
		setFinestraLogin();
		setVisualizzaTipoComunicazione();
		setUserPW();
		setInserimenti();
		setBottoneLogin();
		setBottoneRegistrati();

		this.finestraLogin.getContentPane().add(this.visualizzaTipoComunicazione);
		this.finestraLogin.getContentPane().add(this.username);
		this.finestraLogin.getContentPane().add(this.pw);
		this.finestraLogin.getContentPane().add(this.inserisciUser);
		this.finestraLogin.getContentPane().add(this.inserisciPW);
		this.finestraLogin.getContentPane().add(this.login);
		this.finestraLogin.getContentPane().add(this.registrati);
		
		this.finestraLogin.setVisible(false);
	}
	
	public JFrame getFinestraLogin() {
		return this.finestraLogin;
	}
	
	private void setVisualizzaTipoComunicazione() {
		
		this.visualizzaTipoComunicazione = new JTextField(1);
		this.visualizzaTipoComunicazione.setBounds(10, 10, 170, 30);
		this.visualizzaTipoComunicazione.setEditable(false);
		
	}
	
	private void setBottoneRegistrati() {
		
		this.registrati = new JButton("Registrati");
		this.registrati.setBounds(90, 140, 90, 30);
		this.registrati.addActionListener(new AscoltatoreBottoneRegistrati());
		
	}

	private void setBottoneLogin() {
		
		this.login = new JButton("Gioca");
		this.login.setBounds(10, 140, 70, 30);
		this.login.addActionListener(new AscoltatoreBottoneLogin());
	}

	private void setInserimenti() {

		this.inserisciUser = new JTextField(1);
		this.inserisciPW = new JPasswordField(1);
		this.inserisciUser.setBounds(90, 50, 90, 30);
		this.inserisciPW.setBounds(90, 90, 90, 30);
		
	}
	
	private void setUserPW() {

		this.username = new JLabel("Username");
		this.pw = new JLabel("Password");
		this.username.setBounds(10, 50, 70, 30);
		this.pw.setBounds(10, 90, 70, 30);
	}

	private void setFinestraLogin() {
		
		this.finestraLogin = new JFrame("Login");
		this.finestraLogin.setBounds(500, 200, 195, 210);
		this.finestraLogin.setResizable(false);
		this.finestraLogin.setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);
		this.finestraLogin.getContentPane().setLayout(null);
	}
	
	/*
	public Socket getSocketClient() {
		return this.clientSocket;
		//tutte le volte che facciamo new Socket nelle altre classi dobbiamo usare questo...
	}*/

	class AscoltatoreBottoneLogin implements ActionListener {

		String esitoLogin = null;
		
		@Override
		public void actionPerformed(ActionEvent gioca) {
			
			esitoLogin = login();
			
			if (esitoLogin.equalsIgnoreCase("true")) {
				JOptionPane.showMessageDialog(finestraLogin, "Login riuscito");
				System.out.println("inserisciUser.getText()"+inserisciUser.getText());
				try {
					clientSocket = new Socket(HOST, PORT);
					gestioneFinestre.setCorrectWindow(clientSocket, server, gioca.getActionCommand(), finestraLogin, visualizzaTipoComunicazione.getText(), inserisciUser.getText(), null, client);
				} catch (UnknownHostException e) {
					System.out.println(HOST+" di login sconosciuto");
					//bisogna decidere cosa fargli fare
				} catch (IOException e) {
					System.out.println(HOST+" di login conosciuto ma "+PORT+" occupata");
					//bisogna decidere cosa fargli fare
				}
			}
			else if (esitoLogin.equals("prevLog")) {
				JOptionPane.showMessageDialog(finestraLogin, "Login già effettuato");
				inserisciUser.setText("");
				inserisciPW.setText("");
			}
			else if (esitoLogin.equals("sqlExcp")) {
				JOptionPane.showMessageDialog(finestraLogin, "Problema di connessione, riprova");
				inserisciUser.setText("");
				inserisciPW.setText("");
			}
			else if (esitoLogin.equals("invalidData")) {
				JOptionPane.showMessageDialog(finestraLogin, "Dati non validi");
				inserisciUser.setText("");
				inserisciPW.setText("");				
			}
			else if (esitoLogin.equals("false")) {
				JOptionPane.showMessageDialog(finestraLogin, "Login non valido");
				inserisciUser.setText("");
				inserisciPW.setText("");				
			}
			
		}
		
		public String login() {
			
			String esito = null;
			
			//Se sto comunicando via SOCKET
			if (visualizzaTipoComunicazione.getText().equalsIgnoreCase("socket")) {

				analisiLogin = new AnalisiLogin();
				String user = analisiLogin.inviaUser(inserisciUser.getText());
				String pw = analisiLogin.inviaPW(inserisciPW.getPassword().toString());
				
				BufferedReader lettore = null;
				PrintWriter scrittore = null;
				String daInviare = null;
				
				try {
					clientSocket = new Socket(HOST, PORT);
					lettore = new BufferedReader(new InputStreamReader(clientSocket.getInputStream()));
					scrittore = new PrintWriter(clientSocket.getOutputStream(), true);
					
					daInviare = "login@"+user+";"+pw;
					System.out.println("LOGIN INVIARE: "+daInviare);
					
					scrittore.println(daInviare);
					scrittore.flush();
					
					esito = lettore.readLine();
					esito = analisiLogin.interpretazioneEsitoLogin(esito);
					System.out.println("LOGIN ESITO: "+esito);
					//ad esito faccio assumere degli stati che voglio io per fargli 
					//combaciare con le problematiche di serverTaskLogin che arrivano con ko@
					lettore.close();
					scrittore.checkError();
					clientSocket.close();
				} catch (UnknownHostException e) {
					System.out.println(HOST+" di login sconosciuto");
					//bisogna decidere cosa fargli fare
				} catch (IOException e) {
					System.out.println(HOST+" di login conosciuto ma "+PORT+" occupata");
					//bisogna decidere cosa fargli fare
				}	
			}
			//Se sto comunicando via RMI
			else if(visualizzaTipoComunicazione.getText().equalsIgnoreCase("rmi")) {
					
				ServerAccept stub = client.getStub();
				
				try {
					System.out.println("USERNAME CLIENT: "+inserisciUser.getText());
					server = stub.loginRMI(inserisciUser.getText(), inserisciPW.getText(), client);
					if (server != null) {
						esito = "true";
					}
					else {
						esito = "false";
					}
				} catch (RemoteException e) {
					System.out.println("Problema in fase di loginRMI");
					System.out.println("Message login RMI: "+e.getMessage());
					esito = "false";
				}
			}
			return esito;
		}
	}	
		
	class AscoltatoreBottoneRegistrati implements ActionListener {

		@Override
		public void actionPerformed(ActionEvent prosegui) {			
			gestioneFinestre.setCorrectWindow(clientSocket, null, prosegui.getActionCommand(), finestraLogin, visualizzaTipoComunicazione.getText(), inserisciUser.getText(), null, null);
		}		
	}	
}
